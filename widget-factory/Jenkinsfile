#!/usr/bin/env groovy

openshift.withCluster() {
    env.NAMESPACE = openshift.project()
    env.APPLICATION_NAME = "widget-factory"
    env.APPLICATION_RELEASE = "0.0.1"
    echo "Starting Pipeline for ${APPLICATION_NAME}..."
}

pipeline {
    // Jenkins will dynamically provision this as OpenShift Pod
    // All the stages and steps of this Pipeline will be executed on this Pod
    // After Pipeline completes the Pod is killed so every run will have clean
    // workspace
    agent {
        label 'widget-jenkins-agent'
    }
    stages {
        // Run Maven build, skipping tests
        stage('Build') {
            agent { label 'maven' }
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh "mvn clean install"
                }
            }
        }

        // apply ansible config
        stage('Apply OpenShift Manifests with Ansible') {
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh "ansible-galaxy install -r requirements.yml --roles-path=galaxy"
                    sh "ansible-playbook -i .applier/inventory/ galaxy/openshift-applier/playbooks/openshift-cluster-seed.yml -e application_release=${APPLICATION_RELEASE}"
                    openshift.selector('deployment', env.APPLICATION_NAME).rollout().pause()
                }
            }
        }

        // Build Container Image using the artifacts produced in previous stages
        stage('Build Container Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(NAMESPACE) {
                            openshift.selector("bc", "${APPLICATION_NAME}").startBuild().logs("-f")
                            def blds = openshift.selector("bc", "${APPLICATION_NAME}").related('builds')
                            timeout(time: 20, unit: 'MINUTES') {
                                blds.untilEach {
                                    if (it.object().status.phase == "Failed") {
                                        error("Build failed")
                                    }
                                    return it.object().status.phase == "Complete"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy to OCP') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.tag("${env.NAMESPACE}/${env.APPLICATION_NAME}:latest", "${env.NAMESPACE}/${env.APPLICATION_NAME}:${APPLICATION_RELEASE}")
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(NAMESPACE) {
                            def deployment = openshift.selector('deployment', env.APPLICATION_NAME)
                            deployment.rollout().resume()
                            deployment.rollout().status()
                        }
                    }
                }
            }
        }
    }
}