#!/usr/bin/env groovy

openshift.withCluster() {
    env.NAMESPACE = openshift.project()
    env.APP_NAME = "widget-factory"
    echo "Starting Pipeline for ${APP_NAME}..."
}

pipeline {
    // Jenkins will dynamically provision this as OpenShift Pod
    // All the stages and steps of this Pipeline will be executed on this Pod
    // After Pipeline completes the Pod is killed so every run will have clean
    // workspace
    agent {
        label 'widget-jenkins-agent'
    }
    stages {
        // Run Maven build, skipping tests
        stage('Build') {
            agent { label 'maven' }
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh "mvn clean install"
                }
            }
        }

        // apply ansible config
        stage('Apply OpenShift Manifests with Ansible') {
            steps {
                dir(env.APPLICATION_CONTEXT_DIR) {
                    sh "ansible-galaxy install -r requirements.yml --roles-path=galaxy"
                    sh "ansible-playbook -i .applier/inventory/ galaxy/openshift-applier/playbooks/openshift-cluster-seed.yml -e APPLICATION_RELEASE=0.0.1"
                }
            }
        }

        // Build Container Image using the artifacts produced in previous stages
        stage('Build Container Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("${NAMESPACE}") {
                            openshift.selector("bc", "${APP_NAME}").startBuild().logs("-f")
                        }
                    }
                }
            }
        }

//        stage('Deploy to Dev') {
//            steps {
//                script {
//                    openshift.withCluster() {
//                        openshift.tag("${env.STAGE0}/${env.APP_NAME}:latest", "${env.STAGE1}/${env.APP_NAME}:latest")
//                    }
//                }
//            }
//        }
//
//        stage('Verify Deployment to Dev') {
//            steps {
//                script {
//                    openshift.withCluster() {
//                        openshift.withProject("${STAGE1}") {
//                            def dcObj = openshift.selector('deployment', env.APP_NAME).object()
//                            def podSelector = openshift.selector('pod', [deployment: "${APP_NAME}-${dcObj.status.latestVersion}"])
//                            podSelector.untilEach {
//                                echo "pod: ${it.name()}"
//                                return it.object().status.containerStatuses[0].ready
//                            }
//                        }
//                    }
//                }
//            }
//        }
    }
}