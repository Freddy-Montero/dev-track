#!/usr/bin/env groovy

openshift.withCluster() {
    env.NAMESPACE = openshift.project()
    env.APP_NAME = "widget-factory"
    echo "Starting Pipeline for ${APP_NAME}..."
}

pipeline {
    // Jenkins will dynamically provision this as OpenShift Pod
    // All the stages and steps of this Pipeline will be executed on this Pod
    // After Pipeline completes the Pod is killed so every run will have clean
    // workspace
    agent {
        label 'widget-jenkins-agent'
    }
    stages {
        // Run Maven build, skipping tests
        stage('Build') {
            steps {
                dir('env.APPLICATION_CONTEXT_DIR') {
                    sh "mvn clean install -DskipTests=true"
                }
            }
        }

        // Run Maven unit tests
        stage('Unit Test') {
            steps {
                dir('env.APPLICATION_CONTEXT_DIR') {
                    sh "mvn test -f ${POM_FILE}"
                }
            }
        }

        // apply ansible config
        stage('Ansible') {
            steps {
                dir('env.APPLICATION_CONTEXT_DIR') {
                    sh "ansible-playbook -i ./.applier/ galaxy/openshift-applier/playbooks/openshift-cluster-seed.yml"
                    sh "ansible-playbook -i inventory/hosts roles/openshift-applier/playbooks/openshift-cluster-seed.yml -e APPLICATION_RELEASE=0.0.1"
                }
            }
        }
//
//        // Build Container Image using the artifacts produced in previous stages
//        stage('Build Container Image') {
//            steps {
//                // Copy the resulting artifacts into common directory
//                sh """
//                  ls target/*
//                  rm -rf oc-build && mkdir -p oc-build/deployments
//                  for t in jar war ear; do
//                    cp -rfv ./target/*.\$t oc-build/deployments/ 2> /dev/null || echo "No \$t files"
//                  done
//                """
//
//                // Build container image using local Openshift cluster
//                // Giving all the artifacts to OpenShift Binary Build
//                // This places your artifacts into right location inside your S2I image
//                // if the S2I image supports it.
//                script {
//                    openshift.withCluster() {
//                        openshift.withProject("${STAGE0}") {
//                            openshift.selector("bc", "${APP_NAME}").startBuild().logs("-f")
//                        }
//                    }
//                }
//            }
//        }
//
//        stage('Deploy to Dev') {
//            steps {
//                script {
//                    openshift.withCluster() {
//                        openshift.tag("${env.STAGE0}/${env.APP_NAME}:latest", "${env.STAGE1}/${env.APP_NAME}:latest")
//                    }
//                }
//            }
//        }
//
//        stage('Verify Deployment to Dev') {
//            steps {
//                script {
//                    openshift.withCluster() {
//                        openshift.withProject("${STAGE1}") {
//                            def dcObj = openshift.selector('dc', env.APP_NAME).object()
//                            def podSelector = openshift.selector('pod', [deployment: "${APP_NAME}-${dcObj.status.latestVersion}"])
//                            podSelector.untilEach {
//                                echo "pod: ${it.name()}"
//                                return it.object().status.containerStatuses[0].ready
//                            }
//                        }
//                    }
//                }
//            }
//        }
    }
}